generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String  @unique
  password  String
  status    Boolean @default(true)  
  kycStatus KycStatus @default(pending)
  role      Role  @default(user) 
  createdAt DateTime @default(now())
  kycDetail KycDetail?
  wallet    Wallet?
  transactions Transaction[]
  orders    Order[]
  warehouses Warehouse[]
  remittances    Remittance[]
}

model KycDetail {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int      @unique
  mobile            String
  gst               Boolean
  gstNumber         String?
  gstCertificateUrl String?
  shipments         String
  companyName       String
  companyEmail      String
  companyContact    String
  billingAddress    String
  pincode           String
  state             String
  city              String
  website           String?
  signatureUrl      String?
  companyLogoUrl    String?
  companyType       String
  panCardNo         String
  panCardUrl        String?
  aadhaarNo         String
  aadhaarFrontUrl   String?
  aadhaarBackUrl    String?
  accountHolder     String
  bankName          String
  accountType       String
  accountNo         String
  ifsc              String
  chequeUrl         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Wallet {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
  balance   Float   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Transaction {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  amount    Float
  type      String
  createdAt DateTime @default(now())
}

model Order {
  id              Int      @id @default(autoincrement()) 
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  customerName    String     // consignee
  mobile          String
  email           String?
  address         String
  landmark        String?
  pincode         String
  state           String
  city            String
  orderId         String   @unique 
  orderDate       DateTime
  paymentMode     String
  productName     String
  category        String
  quantity        Int
  orderValue      Float
  hsn             String?
  codAmount       Float?
  physicalWeight  Float
  length          Float
  breadth         Float
  height          Float
  courierName     String?
  pickupLocation  String?
  status          OrderStatus   @default(unshipped)
  shippingId      String?    
  awbNumber       String?     // awb hi waybill hai...
  labelUrl        String?   
  billableWeight  Float?
  ageing          Int?    
  attempts        Int?     
  shippingDetails String?
  remarks         String?    
  remittanceId   Int?        
  remittance     Remittance? @relation(fields: [remittanceId], references: [id], onDelete: SetNull) 
  @@index([remittanceId])

  updatedAt       DateTime   @updatedAt
  createdAt       DateTime @default(now())  
}

model Warehouse {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  warehouseName String
  pincode      String
  address1     String
  address2     String?
  landmark     String?
  state        String
  city         String
  contactName  String
  mobile       String
  isPrimary    Boolean?  @default(false)
  status       Boolean?  @default(true) 
  createdAt    DateTime @default(now())
}

model ShippingRates{
  id                   Int      @id @default(autoincrement())
  courierChargesType   String
  courierChargesAmount Float
  codChargesType       String
  codChargesAmount     Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}


model Remittance {
  id               Int      @id @default(autoincrement())
  userId           Int     
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  remittanceDate   DateTime 
  utrReference     String?  

  collectableValue Float    
  netOffAmount     Float    @default(0) 
  earlyCodCharge   Float    @default(0) 
  otherDeductions  Float    @default(0)  
  codPaid          Float    
  remarks          String?  

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Order[] 
  @@index([userId])  
}


enum Role {
  user
  admin
}
enum KycStatus {
  pending
  approved
  rejected 
  none
}

enum OrderStatus { 
  unshipped
  shipped
  in_transit
  out_for_delivery
  delivered
  undelivered
  rto_intransit
  rto_delivered
  lost_shipment
  cancelled
}