generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String             @unique
  password         String
  status           Boolean            @default(true)
  role             Role               @default(user)
  createdAt        DateTime           @default(now())
  kycStatus        KycStatus          @default(pending)
  kycDetail        KycDetail?
  orders           Order[]
  remittances      Remittance[]
  transactions     Transaction[]
  wallet           Wallet?
  warehouses       Warehouse[]
  complaints       Complaint[]
  couponRedemption CouponRedemption[]
}

model KycDetail {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  gst               Boolean
  gstNumber         String?
  gstCertificateUrl String?
  shipments         String
  companyName       String
  companyEmail      String
  companyContact    String
  billingAddress    String
  pincode           String
  state             String
  city              String
  website           String?
  signatureUrl      String?
  companyLogoUrl    String?
  panCardNo         String
  panCardUrl        String?
  aadhaarNo         String
  aadhaarFrontUrl   String?
  aadhaarBackUrl    String?
  accountHolder     String
  bankName          String
  accountType       String
  accountNo         String
  ifsc              String
  chequeUrl         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  mobile            String
  companyType       String
  user              User     @relation(fields: [userId], references: [id])
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id                Int      @id @default(autoincrement())
  userId            Int
  amount            Float
  type              String
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
  razorpayPaymentId String?
  razorpayOrderId   String?
  orderId           Int? // Link to the Order for shipping charges
  order             Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status            String?
  remarks           String?

  @@index([userId])
  @@index([orderId])
}

model Order {
  id              Int              @id @default(autoincrement())
  userId          Int
  orderId         String           @unique
  orderDate       DateTime
  paymentMode     String
  items           OrderItem[]
  physicalWeight  Float
  length          Float
  breadth         Float
  height          Float
  pickupLocation  String?
  address         String
  pincode         String
  state           String
  city            String
  createdAt       DateTime         @default(now())
  codAmount       Float?
  customerName    String
  email           String?
  landmark        String?
  mobile          String
  awbNumber       String?
  labelUrl        String?
  shippingId      String?
  status          OrderStatus      @default(unshipped)
  trackingHistory OrderTracking[]
  ageing          Int?
  attempts        Int?
  billableWeight  Float?
  remarks         String?
  shippingDetails String?
  shippingCost    Float?
  updatedAt       DateTime         @updatedAt
  courierName     String?
  remittanceId    Int?
  remittance      Remittance?      @relation(fields: [remittanceId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  transactions    Transaction[]
  warehouseId     Int?
  warehouse       Warehouse?       @relation(fields: [warehouseId], references: [id])
  courierPayables CourierPayable[]

  @@index([remittanceId])
  @@index([userId])
  @@index([warehouseId])
}
// history of order
model OrderTracking {
  id               Int      @id @default(autoincrement())
  orderId          Int
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status           String // Original status from courier
  normalizedStatus String // Mapped to your system's OrderStatus enum
  description      String?  @db.Text
  courier          String?
  timestamp        DateTime @default(now())
  createdAt        DateTime @default(now())

  @@index([orderId])
  @@index([normalizedStatus])
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade) // Cascade delete items if order is deleted
  productName String
  category    String
  quantity    Int
  orderValue  Float
  hsn         String?

  @@index([orderId])
}

model Warehouse {
  id            Int      @id @default(autoincrement())
  userId        Int
  warehouseCode String   @unique
  warehouseName String
  pincode       String
  address1      String
  address2      String?
  landmark      String?
  state         String
  city          String
  contactName   String
  mobile        String
  createdAt     DateTime @default(now())
  isPrimary     Boolean? @default(false)
  status        Boolean? @default(true)
  user          User     @relation(fields: [userId], references: [id])
  orders        Order[]
}

model ShippingRates {
  id                   Int      @id @default(autoincrement())
  courierChargesType   String
  courierChargesAmount Float
  codChargesType       String
  codChargesAmount     Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Remittance {
  id               Int      @id @default(autoincrement())
  userId           Int
  remittanceDate   DateTime
  utrReference     String?
  collectableValue Float
  netOffAmount     Float    @default(0)
  earlyCodCharge   Float    @default(0)
  otherDeductions  Float    @default(0)
  codPaid          Float
  remarks          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Order[]
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Complaint {
  id           Int             @id @default(autoincrement())
  userId       Int
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  awbNumber    String
  issue        String          @db.Text
  fileUrl      String?
  status       ComplaintStatus @default(open)
  adminRemarks String?         @db.Text
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([userId])
  @@index([awbNumber])
  @@index([status])
}

model CompanyAccount {
  id           Int                  @id @default(autoincrement())
  balance      Float                @default(0)
  updatedAt    DateTime             @updatedAt
  transactions CompanyTransaction[]
}

model CompanyTransaction {
  id         Int            @id @default(autoincrement())
  accountId  Int
  account    CompanyAccount @relation(fields: [accountId], references: [id])
  amount     Float
  type       String
  sourceType String
  sourceId   Int?
  createdAt  DateTime       @default(now())
}

model CourierPayable {
  id           Int      @id @default(autoincrement())
  courierName  String
  amount       Float
  orderId      Int
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status       String // "pending", "paid", "cancelled"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  settlementId Int?

  @@index([orderId])
  @@index([courierName])
}

model Coupon {
  id               Int                @id @default(autoincrement())
  name             String
  code             String             @unique
  startDate        DateTime
  endDate          DateTime
  limit            Int // Total number of times this coupon can be used
  usedCount        Int                @default(0) // How many times it has been used
  condition        String?
  amount           Float
  amountType       CouponAmountType   @default(fixed)
  schedule         DateTime?
  status           Boolean            @default(true)
  createdBy        Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  couponRedemption CouponRedemption[]

  @@index([code])
  @@index([status])
}

model CouponRedemption {
  id         Int      @id @default(autoincrement())
  userId     Int
  couponId   Int
  redeemedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId]) // Prevents duplicate redemption by same user
  @@index([couponId])
  @@index([userId])
}

model News {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int?

  @@index([status])
  @@index([createdAt])
}

enum CouponAmountType {
  fixed
  percent
}

enum Role {
  user
  admin
}

enum KycStatus {
  pending
  approved
  rejected
  none
}

enum OrderStatus {
  unshipped
  pending_manifest
  manifested
  manifest_failed
  shipped
  in_transit
  out_for_delivery
  delivered
  undelivered
  rto_intransit
  rto_delivered
  lost_shipment
  cancelled
}

enum ComplaintStatus {
  open
  pending
  closed
}
