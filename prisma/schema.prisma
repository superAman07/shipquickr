generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String        @unique
  password     String
  status       Boolean       @default(true)
  role         Role          @default(user)
  createdAt    DateTime      @default(now())
  kycStatus    KycStatus     @default(pending)
  kycDetail    KycDetail?
  orders       Order[]
  remittances  Remittance[]
  transactions Transaction[]
  wallet       Wallet?
  warehouses   Warehouse[]
}

model KycDetail {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  gst               Boolean
  gstNumber         String?
  gstCertificateUrl String?
  shipments         String
  companyName       String
  companyEmail      String
  companyContact    String
  billingAddress    String
  pincode           String
  state             String
  city              String
  website           String?
  signatureUrl      String?
  companyLogoUrl    String?
  panCardNo         String
  panCardUrl        String?
  aadhaarNo         String
  aadhaarFrontUrl   String?
  aadhaarBackUrl    String?
  accountHolder     String
  bankName          String
  accountType       String
  accountNo         String
  ifsc              String
  chequeUrl         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  mobile            String
  companyType       String
  user              User     @relation(fields: [userId], references: [id])
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Float
  type      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  orderId         String      @unique
  orderDate       DateTime
  paymentMode     String
  productName     String
  category        String
  quantity        Int
  orderValue      Float
  hsn             String?
  physicalWeight  Float
  length          Float
  breadth         Float
  height          Float
  pickupLocation  String?
  address         String
  pincode         String
  state           String
  city            String
  createdAt       DateTime    @default(now())
  codAmount       Float?
  customerName    String
  email           String?
  landmark        String?
  mobile          String
  awbNumber       String?
  labelUrl        String?
  shippingId      String?
  status          OrderStatus @default(unshipped)
  ageing          Int?
  attempts        Int?
  billableWeight  Float?
  remarks         String?
  shippingDetails String?
  updatedAt       DateTime    @updatedAt
  courierName     String?
  remittanceId    Int?
  remittance      Remittance? @relation(fields: [remittanceId], references: [id])
  user            User        @relation(fields: [userId], references: [id])

  @@index([remittanceId])
}

model Warehouse {
  id            Int      @id @default(autoincrement())
  userId        Int
  warehouseName String
  pincode       String
  address1      String
  address2      String?
  landmark      String?
  state         String
  city          String
  contactName   String
  mobile        String
  createdAt     DateTime @default(now())
  isPrimary     Boolean? @default(false)
  status        Boolean? @default(true)
  user          User     @relation(fields: [userId], references: [id])
}

model ShippingRates {
  id                   Int      @id @default(autoincrement())
  courierChargesType   String
  courierChargesAmount Float
  codChargesType       String
  codChargesAmount     Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Remittance {
  id               Int      @id @default(autoincrement())
  userId           Int
  remittanceDate   DateTime
  utrReference     String?
  collectableValue Float
  netOffAmount     Float    @default(0)
  earlyCodCharge   Float    @default(0)
  otherDeductions  Float    @default(0)
  codPaid          Float
  remarks          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Order[]
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  user
  admin
}

enum KycStatus {
  pending
  approved
  rejected
  none
}

enum OrderStatus {
  unshipped
  shipped
  in_transit
  out_for_delivery
  delivered
  undelivered
  rto_intransit
  rto_delivered
  lost_shipment
  cancelled
}
